# ONA Platform Automations for Magento 2.4.8 Development Environment
# Uses the correct ONA YAML format with services and tasks

# Services are long-running processes that should remain active
services:
  # Database service - handles MariaDB setup and startup
  database:
    name: MariaDB Database
    description: MariaDB database server for Magento 2
    triggeredBy:
      - manual
    commands:
      start: |
        echo "Starting MariaDB service..."
        setup-mysql-data
        sudo service mariadb start
      ready: sudo service mariadb status
      stop: sudo service mariadb stop

  # Redis cache service
  redis:
    name: Redis Cache
    description: Redis cache server for Magento 2
    triggeredBy:
      - manual
    commands:
      start: sudo service redis-server start
      ready: sudo service redis-server status
      stop: sudo service redis-server stop

  # PHP-FPM service
  php-fpm:
    name: PHP-FPM
    description: PHP FastCGI Process Manager
    triggeredBy:
      - manual
    commands:
      start: sudo service php8.2-fpm start
      ready: sudo service php8.2-fpm status
      stop: sudo service php8.2-fpm stop

  # Nginx web server
  nginx:
    name: Nginx Web Server
    description: Nginx web server for Magento 2
    triggeredBy:
      - manual
    commands:
      start: sudo service nginx start
      ready: sudo service nginx status
      stop: sudo service nginx stop

  # RabbitMQ message queue (optional, manual start)
  rabbitmq:
    name: RabbitMQ Message Queue
    description: RabbitMQ server for Magento 2 queues
    triggeredBy:
      - manual
    commands:
      start: rabbitmq-setup
      ready: sudo rabbitmqctl status
      stop: sudo service rabbitmq-server stop

  # ElasticSearch service
  elasticsearch:
    name: ElasticSearch
    description: ElasticSearch for Magento 2 search functionality
    triggeredBy:
      - manual
    commands:
      start: magento-services opensearch start
      ready: curl -X GET "localhost:9200/"
      stop: magento-services opensearch stop   

# Tasks are one-time operations that run and complete
tasks:
  # Environment initialization task
  initialize-environment:
    name: Initialize Development Environment
    description: Welcome to Magento 2 ONA (former Gitpod) Development Environment
    triggeredBy:
      - postDevcontainerStart
    command: |
      echo "Magento 2 Development Environment Ready!"
      echo "=============================================="
      echo ""
      echo "Next steps:"
      echo "1. start-all"
      echo "2. Install Magento: ./m2-install.sh"
      echo ""
      echo "Web interface: Port 8002"

  # Manual task to start all services including RabbitMQ
  start-all-services:
    name: Start All Services
    description: Start all services including RabbitMQ
    triggeredBy:
      - manual
    command: magento-services start

  # Manual task to restart services
  restart-services:
    name: Restart All Services
    description: Restart all Magento 2 services
    triggeredBy:
      - manual
    command: restart-all

  # Manual database diagnostics
  database-diagnostics:
    name: Database Diagnostics
    description: Test and fix database connectivity issues
    triggeredBy:
      - manual
    command: |
      echo "Running database diagnostics..."
      test-db
      if ! test-db >/dev/null 2>&1; then
        echo "Attempting to fix database authentication..."
        fix-mysql
      fi
      echo "Database diagnostics complete!"

  # Development tools setup
  setup-dev-tools:
    name: Setup Development Tools
    description: Configure debugging and monitoring tools
    triggeredBy:
      - manual
    command: |
      echo "Development tools available:"
      echo "- xdebug-on/off     : Toggle Xdebug debugging"
      echo "- blackfire-config  : Setup Blackfire profiling" 
      echo "- newrelic-install  : Install New Relic monitoring"
      echo "- rabbitmq-config   : Configure RabbitMQ users"
      echo ""
      echo "Run any of these commands to configure tools as needed."

  # Magento installation helper
  install-magento:
    name: Install Magento 2.4.8-p2
    description: Install fresh Magento 2.4.8-p2 instance with all configurations
    triggeredBy:
      - manual
    command: |
      echo "Starting Magento 2.4.8-p2 installation..."
      echo "This will take several minutes..."
      
      # Ensure services are running
      if ! status-all | grep -q "MariaDB: Running"; then
        echo "Checking to make sure all required Magento 2 services are running..."
        magento-services start
        sleep 5
      fi
      
      # Run the installation script
      chmod +x /workspaces/magento2gitpod/m2-install.sh
      /workspaces/magento2gitpod/m2-install.sh
      
      echo "Magento installation completed!"
      echo "Check the output above for access URLs and credentials."

  cloudbeaver:
    name: CloudBeaver (DB Manager)
    description: Launch CloudBeaver web UI on port 8003
    triggeredBy:
      - manual
    command: |
      set -e
      echo "🔧 Ensuring MariaDB is running..."
      if ! sudo service mariadb status >/devnull 2>&1; then
        magento-services start-quick || {
          sudo service mariadb start
          sudo service redis-server start
          sudo service php8.2-fpm start
          sudo service nginx start
        }
      fi

      echo "🔧 Allowing external DB connections (bind-address)..."
      if grep -q "bind-address = 127.0.0.1" /etc/mysql/conf.d/magento.cnf; then
        sudo sed -i 's/bind-address = 127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/conf.d/magento.cnf
        sudo sed -i 's/bind-address = 127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/mariadb.conf.d/50-server.cnf
        sudo service mariadb restart
      fi

      echo "🔑 Granting root access from any host..."
      mariadb -uroot -pnem4540 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'nem4540' WITH GRANT OPTION; FLUSH PRIVILEGES;" || true

      echo "🐳 Starting CloudBeaver container on port 8003..."
      if ! command -v docker >/dev/null 2>&1; then
        echo "Docker is required (docker-in-docker feature must be enabled)."; exit 1
      fi
      CB_LOCAL_HOST_ADDR=$(ip route get 1 | awk '{print $7; exit}')
      docker rm -f cloudbeaver >/dev/null 2>&1 || true
      docker run --name cloudbeaver -d --restart unless-stopped \
        -p 8003:8978 \
        --add-host=host.docker.internal:${CB_LOCAL_HOST_ADDR} \
        -v /var/cloudbeaver/workspace:/opt/cloudbeaver/workspace \
        dbeaver/cloudbeaver:latest

      echo "🌐 Exposing port 8003 publicly in ONA..."
      gitpod environment port open 8003 --name cloudbeaver || true

      echo "✅ CloudBeaver running: open port 8003"
      echo "DB connection in CloudBeaver → host: host.docker.internal, port: 3306, user: root, pass: nem4540"
  
  mailhog:
    name: MailHog (Mail Catcher)
    description: Launch MailHog (SMTP:1025, Web UI:8025) and configure PHP sendmail
    triggeredBy:
      - manual
    command: |
      set -e

      echo "🐳 Starting MailHog container..."
      if ! command -v docker >/dev/null 2>&1; then
        echo "Docker is required (docker-in-docker feature must be enabled)."; exit 1
      fi
      docker rm -f mailhog >/dev/null 2>&1 || true
      docker run -d --name mailhog --restart unless-stopped \
        -p 8025:8025 -p 1025:1025 \
        mailhog/mailhog:latest

      echo "⬇️ Installing mhsendmail..."
      TMP_BIN=/tmp/mhsendmail_linux_amd64
      wget -q https://github.com/mailhog/mhsendmail/releases/download/v0.2.0/mhsendmail_linux_amd64 -O "$TMP_BIN"
      sudo chmod +x "$TMP_BIN"
      sudo mv "$TMP_BIN" /usr/local/bin/mhsendmail

      echo "🛠 Configuring PHP sendmail_path for MailHog..."
      PHPV="${PHP_VERSION:-8.2}"
      for sapi in cli fpm; do
        INI="/etc/php/${PHPV}/${sapi}/php.ini"
        if [ -f "$INI" ]; then
          if grep -q '^;sendmail_path =' "$INI"; then
            sudo sed -i 's#^;sendmail_path =#sendmail_path="/usr/local/bin/mhsendmail --smtp-addr=127.0.0.1:1025"#' "$INI"
          elif ! grep -q '^sendmail_path=' "$INI"; then
            echo 'sendmail_path="/usr/local/bin/mhsendmail --smtp-addr=127.0.0.1:1025"' | sudo tee -a "$INI" >/dev/null
          fi
        fi
      done

      echo "🔁 Reloading PHP-FPM (if available)..."
      sudo service php${PHPV}-fpm reload >/dev/null 2>&1 || sudo service php8.2-fpm reload >/dev/null 2>&1 || true

      echo "🌐 Exposing MailHog web UI port publicly in ONA..."
      gitpod environment port open 8025 --name mailhog || true
      # Optionally expose SMTP too (usually not necessary):
      # gitpod environment port open 1025 --name mailhog-smtp || true

      echo "✅ MailHog running: Web UI on port 8025, SMTP on port 1025"
      echo "PHP mail() will now go to MailHog."

  stop-mailhog:
    name: Stop MailHog
    description: Stop and remove the MailHog container
    triggeredBy:
      - manual
    command: docker rm -f mailhog >/dev/null 2>&1 || true